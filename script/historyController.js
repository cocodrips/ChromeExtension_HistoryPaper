// Generated by CoffeeScript 1.6.3
/*
  memo
  どんな情報を知りたい？
  - bkmしてるページはもういつも見てるからいいんじゃないか。
  - 100回以上アクセスしたページとか。(どこがいる？)
*/


(function() {
  var CreateData, ExtractPageData, Hashmap, searchWord;

  $(function() {
    var end, jsonData, now, start,
      _this = this;
    now = new Date();
    start = Date.parse(new Date()) - 8640000;
    end = Date.parse(new Date());
    jsonData = "";
    chrome.history.search({
      "text": "",
      "startTime": start,
      "endTime": end,
      "maxResults": 1000
    }, function(array) {
      var hashmap;
      hashmap = new Hashmap(array);
      searchWord(hashmap.hash);
      return jsonData = new CreateData(hashmap.sortedByTimes());
    });
    return setTimeout(function() {
      console.log(jsonData);
      return draw_treemap(jsonData);
    }, 200);
  });

  Hashmap = (function() {
    var create_hash;

    function Hashmap(hash) {
      this.hash = create_hash(hash);
      this.hashSortedByTimes = null;
    }

    create_hash = function(array) {
      var e, hash, id, _i, _len;
      hash = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        e = array[_i];
        id = e.id;
        if (!hash[id]) {
          hash[id] = {
            time: e.visitCount,
            url: e.url,
            title: e.title
          };
        }
      }
      return hash;
    };

    Hashmap.prototype.sortedByTimes = function() {
      var sorted,
        _this = this;
      if (this.hashSortedByTimes) {
        return this.hashSortedByTimes;
      } else {
        sorted = _.sortBy(this.hash, function(e) {
          return e.time;
        });
        this.hashSortedByTimes = sorted;
      }
      return this.hashSortedByTimes;
    };

    return Hashmap;

  })();

  CreateData = (function() {
    var calcDataSize, calcElementNum, createJson, openURI, pageCheck;

    function CreateData(hash) {
      this.jsonFile = createJson(hash);
      return this.jsonFile;
    }

    createJson = function(hash) {
      var count, json,
        _this = this;
      count = 0;
      json = {
        name: "json",
        children: []
      };
      hash.forEach(function(h) {
        var elementNum, ex, group;
        elementNum = calcElementNum();
        console.log(elementNum);
        if (count < elementNum) {
          if (pageCheck(h)) {
            group = {
              name: h.title,
              children: [
                {
                  name: h.title,
                  size: calcDataSize(h.time),
                  url: h.url,
                  articleId: "article" + count
                }
              ]
            };
            ex = new ExtractPageData(h.url);
            json.children.push(group);
            return count++;
          }
        }
      });
      return json;
    };

    calcElementNum = function() {
      var height, s, width;
      width = $(window).width();
      height = $(window).height();
      s = width * height;
      if (s < 700000) {
        return 4;
      } else if (s < 1500000) {
        return 6;
      } else {
        return 8;
      }
    };

    calcDataSize = function(val) {
      var size;
      size = val < 100 ? 10 : 50;
      return size;
    };

    pageCheck = function(h) {
      var domainType, pageType, t, target, _i, _len;
      if (!this.domainHash) {
        this.domainHash = [];
      }
      if (h.url.indexOf("https") > -1) {
        return false;
      }
      if (h.title.length < 2) {
        return false;
      }
      pageType = h.url.split("/").pop();
      target = ["png", "jpg", "mp3"];
      for (_i = 0, _len = target.length; _i < _len; _i++) {
        t = target[_i];
        if (pageType.indexOf(t) !== -1) {
          return false;
        }
      }
      domainType = h.url.split("/")[2];
      if (!this.domainHash[domainType]) {
        this.domainHash[domainType] = true;
      } else {
        return false;
      }
      if (domainType === "www.youtube.com") {
        return false;
      }
      if (domainType === "127.0.0.1:5000") {
        return false;
      }
      return true;
    };

    openURI = function(url) {
      var encoded,
        _this = this;
      encoded = encodeURIComponent(url);
      return $.ajax({
        type: 'GET',
        url: "http://itolabchica.appspot.com/hs/pageinfo/" + encoded,
        dataType: 'document',
        success: function(json) {
          return console.log(json);
        }
      });
    };

    return CreateData;

  })();

  ExtractPageData = (function() {
    var createDom, openURI;

    function ExtractPageData(url) {
      this.requestUrl = url;
      openURI(this.requestUrl);
    }

    openURI = function(url) {
      var encoded;
      return encoded = encodeURIComponent(url);
    };

    createDom = function(html) {};

    return ExtractPageData;

  })();

  searchWord = function(hashmap) {
    var text, titles,
      _this = this;
    titles = [];
    text = "";
    hashmap.forEach(function(page) {
      var q;
      if (page.url.indexOf("https://www.google.co.jp/search?") !== -1) {
        q = page.url.match(/\?q=.*?\&/);
        if (q) {
          q = decodeURI(q[0].replace(/\?q=(.*?)\&/, '$1'));
          q = q.split(/[\s,\+]+/);
          return q.forEach(function(title) {
            if (text.indexOf(title) === -1) {
              return text += "<span>" + title + "</span>";
            }
          });
        }
      }
    });
    console.log(text);
    return $('#key-cloud').append(text);
  };

}).call(this);
